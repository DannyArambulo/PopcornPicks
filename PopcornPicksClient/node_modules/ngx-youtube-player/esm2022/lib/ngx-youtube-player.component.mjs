import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, } from '@angular/core';
import { YoutubePlayerService, defaultSizes } from './ngx-youtube-player.service';
import * as i0 from "@angular/core";
import * as i1 from "./ngx-youtube-player.service";
export class YoutubePlayerComponent {
    constructor(playerService, elementRef, renderer) {
        this.playerService = playerService;
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.videoId = '';
        this.height = defaultSizes.height;
        this.width = defaultSizes.width;
        /**
         * @description sets the protocol by the navigator object
         * if there is no window, it sets a default http protocol
         * unless the protocol is set from outside
         */
        this.protocol = this.getProtocol();
        this.playerVars = {};
        // player created and initialized - sends instance of the player
        this.ready = new EventEmitter();
        // state change: send the YT event with its state
        this.change = new EventEmitter();
    }
    ngAfterContentInit() {
        const htmlId = this.playerService.generateUniqueId();
        const playerSize = { height: this.height, width: this.width };
        const container = this.renderer.selectRootElement('#yt-player-ngx-component');
        this.renderer.setAttribute(container, 'id', htmlId);
        this.playerService.loadPlayerApi({
            protocol: this.protocol
        });
        this.playerService.setupPlayer(htmlId, {
            change: this.change,
            ready: this.ready
        }, playerSize, this.videoId, this.playerVars);
    }
    getProtocol() {
        const hasWindow = window && window.location;
        const protocol = hasWindow
            ? window.location.protocol.replace(':', '')
            : 'http';
        return protocol;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: YoutubePlayerComponent, deps: [{ token: i1.YoutubePlayerService }, { token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.0.3", type: YoutubePlayerComponent, isStandalone: true, selector: "youtube-player", inputs: { videoId: "videoId", height: "height", width: "width", protocol: "protocol", playerVars: "playerVars" }, outputs: { ready: "ready", change: "change" }, providers: [YoutubePlayerService], ngImport: i0, template: `
    <div id="yt-player-ngx-component"></div>
  `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: YoutubePlayerComponent, decorators: [{
            type: Component,
            args: [{
                    standalone: true,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'youtube-player',
                    template: `
    <div id="yt-player-ngx-component"></div>
  `,
                    providers: [YoutubePlayerService],
                }]
        }], ctorParameters: () => [{ type: i1.YoutubePlayerService }, { type: i0.ElementRef }, { type: i0.Renderer2 }], propDecorators: { videoId: [{
                type: Input
            }], height: [{
                type: Input
            }], width: [{
                type: Input
            }], protocol: [{
                type: Input
            }], playerVars: [{
                type: Input
            }], ready: [{
                type: Output
            }], change: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXlvdXR1YmUtcGxheWVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC15b3V0dWJlLXBsYXllci9zcmMvbGliL25neC15b3V0dWJlLXBsYXllci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUVMLHVCQUF1QixFQUN2QixTQUFTLEVBRVQsWUFBWSxFQUNaLEtBQUssRUFDTCxNQUFNLEdBRVAsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUNMLG9CQUFvQixFQUNwQixZQUFZLEVBQ2IsTUFBTSw4QkFBOEIsQ0FBQzs7O0FBV3RDLE1BQU0sT0FBTyxzQkFBc0I7SUFpQmpDLFlBQ1MsYUFBbUMsRUFDbEMsVUFBc0IsRUFDdEIsUUFBbUI7UUFGcEIsa0JBQWEsR0FBYixhQUFhLENBQXNCO1FBQ2xDLGVBQVUsR0FBVixVQUFVLENBQVk7UUFDdEIsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQW5CcEIsWUFBTyxHQUFHLEVBQUUsQ0FBQztRQUNiLFdBQU0sR0FBRyxZQUFZLENBQUMsTUFBTSxDQUFDO1FBQzdCLFVBQUssR0FBRyxZQUFZLENBQUMsS0FBSyxDQUFDO1FBQ3BDOzs7O1dBSUc7UUFDTSxhQUFRLEdBQVcsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3RDLGVBQVUsR0FBa0IsRUFBRSxDQUFDO1FBRXhDLGdFQUFnRTtRQUN0RCxVQUFLLEdBQUcsSUFBSSxZQUFZLEVBQWEsQ0FBQztRQUNoRCxpREFBaUQ7UUFDdkMsV0FBTSxHQUFHLElBQUksWUFBWSxFQUFrQixDQUFDO0lBTW5ELENBQUM7SUFFSixrQkFBa0I7UUFDaEIsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQ3JELE1BQU0sVUFBVSxHQUFHLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUM5RCxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUMvQywwQkFBMEIsQ0FDM0IsQ0FBQztRQUNGLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDcEQsSUFBSSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUM7WUFDL0IsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRO1NBQ3hCLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUM1QixNQUFNLEVBQ047WUFDRSxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU07WUFDbkIsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLO1NBQ2xCLEVBQ0QsVUFBVSxFQUNWLElBQUksQ0FBQyxPQUFPLEVBQ1osSUFBSSxDQUFDLFVBQVUsQ0FDaEIsQ0FBQztJQUNKLENBQUM7SUFFRCxXQUFXO1FBQ1QsTUFBTSxTQUFTLEdBQUcsTUFBTSxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUM7UUFDNUMsTUFBTSxRQUFRLEdBQUcsU0FBUztZQUN4QixDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUM7WUFDM0MsQ0FBQyxDQUFDLE1BQU0sQ0FBQztRQUNYLE9BQU8sUUFBUSxDQUFDO0lBQ2xCLENBQUM7OEdBbkRVLHNCQUFzQjtrR0FBdEIsc0JBQXNCLDhOQUZ0QixDQUFDLG9CQUFvQixDQUFDLDBCQUh2Qjs7R0FFVDs7MkZBR1Usc0JBQXNCO2tCQVRsQyxTQUFTO21CQUFDO29CQUNULFVBQVUsRUFBRSxJQUFJO29CQUNoQixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsUUFBUSxFQUFFLGdCQUFnQjtvQkFDMUIsUUFBUSxFQUFFOztHQUVUO29CQUNELFNBQVMsRUFBRSxDQUFDLG9CQUFvQixDQUFDO2lCQUNsQzswSUFFVSxPQUFPO3NCQUFmLEtBQUs7Z0JBQ0csTUFBTTtzQkFBZCxLQUFLO2dCQUNHLEtBQUs7c0JBQWIsS0FBSztnQkFNRyxRQUFRO3NCQUFoQixLQUFLO2dCQUNHLFVBQVU7c0JBQWxCLEtBQUs7Z0JBR0ksS0FBSztzQkFBZCxNQUFNO2dCQUVHLE1BQU07c0JBQWYsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEFmdGVyQ29udGVudEluaXQsXG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBDb21wb25lbnQsXG4gIEVsZW1lbnRSZWYsXG4gIEV2ZW50RW1pdHRlcixcbiAgSW5wdXQsXG4gIE91dHB1dCxcbiAgUmVuZGVyZXIyLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gIFlvdXR1YmVQbGF5ZXJTZXJ2aWNlLFxuICBkZWZhdWx0U2l6ZXNcbn0gZnJvbSAnLi9uZ3gteW91dHViZS1wbGF5ZXIuc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICBzdGFuZGFsb25lOiB0cnVlLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgc2VsZWN0b3I6ICd5b3V0dWJlLXBsYXllcicsXG4gIHRlbXBsYXRlOiBgXG4gICAgPGRpdiBpZD1cInl0LXBsYXllci1uZ3gtY29tcG9uZW50XCI+PC9kaXY+XG4gIGAsXG4gIHByb3ZpZGVyczogW1lvdXR1YmVQbGF5ZXJTZXJ2aWNlXSxcbn0pXG5leHBvcnQgY2xhc3MgWW91dHViZVBsYXllckNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQge1xuICBASW5wdXQoKSB2aWRlb0lkID0gJyc7XG4gIEBJbnB1dCgpIGhlaWdodCA9IGRlZmF1bHRTaXplcy5oZWlnaHQ7XG4gIEBJbnB1dCgpIHdpZHRoID0gZGVmYXVsdFNpemVzLndpZHRoO1xuICAvKipcbiAgICogQGRlc2NyaXB0aW9uIHNldHMgdGhlIHByb3RvY29sIGJ5IHRoZSBuYXZpZ2F0b3Igb2JqZWN0XG4gICAqIGlmIHRoZXJlIGlzIG5vIHdpbmRvdywgaXQgc2V0cyBhIGRlZmF1bHQgaHR0cCBwcm90b2NvbFxuICAgKiB1bmxlc3MgdGhlIHByb3RvY29sIGlzIHNldCBmcm9tIG91dHNpZGVcbiAgICovXG4gIEBJbnB1dCgpIHByb3RvY29sOiBzdHJpbmcgPSB0aGlzLmdldFByb3RvY29sKCk7XG4gIEBJbnB1dCgpIHBsYXllclZhcnM6IFlULlBsYXllclZhcnMgPSB7fTtcblxuICAvLyBwbGF5ZXIgY3JlYXRlZCBhbmQgaW5pdGlhbGl6ZWQgLSBzZW5kcyBpbnN0YW5jZSBvZiB0aGUgcGxheWVyXG4gIEBPdXRwdXQoKSByZWFkeSA9IG5ldyBFdmVudEVtaXR0ZXI8WVQuUGxheWVyPigpO1xuICAvLyBzdGF0ZSBjaGFuZ2U6IHNlbmQgdGhlIFlUIGV2ZW50IHdpdGggaXRzIHN0YXRlXG4gIEBPdXRwdXQoKSBjaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPFlULlBsYXllckV2ZW50PigpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBwbGF5ZXJTZXJ2aWNlOiBZb3V0dWJlUGxheWVyU2VydmljZSxcbiAgICBwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG4gICAgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyXG4gICkge31cblxuICBuZ0FmdGVyQ29udGVudEluaXQoKSB7XG4gICAgY29uc3QgaHRtbElkID0gdGhpcy5wbGF5ZXJTZXJ2aWNlLmdlbmVyYXRlVW5pcXVlSWQoKTtcbiAgICBjb25zdCBwbGF5ZXJTaXplID0geyBoZWlnaHQ6IHRoaXMuaGVpZ2h0LCB3aWR0aDogdGhpcy53aWR0aCB9O1xuICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMucmVuZGVyZXIuc2VsZWN0Um9vdEVsZW1lbnQoXG4gICAgICAnI3l0LXBsYXllci1uZ3gtY29tcG9uZW50J1xuICAgICk7XG4gICAgdGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUoY29udGFpbmVyLCAnaWQnLCBodG1sSWQpO1xuICAgIHRoaXMucGxheWVyU2VydmljZS5sb2FkUGxheWVyQXBpKHtcbiAgICAgIHByb3RvY29sOiB0aGlzLnByb3RvY29sXG4gICAgfSk7XG4gICAgdGhpcy5wbGF5ZXJTZXJ2aWNlLnNldHVwUGxheWVyKFxuICAgICAgaHRtbElkLFxuICAgICAge1xuICAgICAgICBjaGFuZ2U6IHRoaXMuY2hhbmdlLFxuICAgICAgICByZWFkeTogdGhpcy5yZWFkeVxuICAgICAgfSxcbiAgICAgIHBsYXllclNpemUsXG4gICAgICB0aGlzLnZpZGVvSWQsXG4gICAgICB0aGlzLnBsYXllclZhcnNcbiAgICApO1xuICB9XG5cbiAgZ2V0UHJvdG9jb2woKSB7XG4gICAgY29uc3QgaGFzV2luZG93ID0gd2luZG93ICYmIHdpbmRvdy5sb2NhdGlvbjtcbiAgICBjb25zdCBwcm90b2NvbCA9IGhhc1dpbmRvd1xuICAgICAgPyB3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wucmVwbGFjZSgnOicsICcnKVxuICAgICAgOiAnaHR0cCc7XG4gICAgcmV0dXJuIHByb3RvY29sO1xuICB9XG59XG4iXX0=